{"version":3,"sources":["components/CardContainer/index.js","components/Navbar/index.js","components/Title/index.js","components/PokeCard/index.js","components/shuffle.js","App.js","serviceWorker.js","index.js"],"names":["CardContainer","props","react_default","a","createElement","className","classState","children","Navbar","href","src","statusState","status","score","topscore","Title","alt","title","PokeCard","onClick","pickedCard","id","name","process","image","shuffle","randomIndex","tempIndex","shuffledArray","i","length","Math","floor","random","App","state","pokemon","selectedIndex","_this","findIndex","item","clicked","setState","concat","map","tempState","this","_this2","Fragment","components_Navbar","components_Title","components_CardContainer","components_PokeCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kjCAceA,MAXf,SAAuBC,GAErB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAMK,YACpBJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACZJ,EAAMM,kBCiBAC,MAvBf,SAAgBP,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8DACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,6BACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBI,KAAK,KAAIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWK,IAAI,4BAG1ER,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8BACZH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAMC,UAAW,UAAYJ,EAAMU,aAAcV,EAAMW,UAG7DV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,UAAuCH,EAAAC,EAAAC,cAAA,YAAOH,EAAMY,QACpDX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wBAAd,cAAgDH,EAAAC,EAAAC,cAAA,YAAOH,EAAMa,sBCH1DC,MAXf,SAAed,GACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOW,IAAI,eAAeN,IAAI,8BAC5C,IAAIR,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAASJ,EAAMgB,gBCY3BC,MAff,SAAkBjB,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBc,QAAS,kBAAMlB,EAAMmB,WAAWnB,EAAMoB,MACnEnB,EAAAC,EAAAC,cAAA,OACEC,UAAU,WACVW,IAAKf,EAAMqB,KACXZ,IAAKa,qBAAyBtB,EAAMuB,kBCW/BC,MAtBf,SAAiBxB,GAWb,IARA,IAKIyB,EACAC,EANEC,EAAgB3B,EAQb4B,EAAID,EAAcE,OAAS,EAAGD,EAAI,EAAGA,IAC1CH,EAAcK,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IAC9CF,EAAYC,EAAcC,GAC1BD,EAAcC,GAAKD,EAAcF,GACjCE,EAAcF,GAAeC,EAIjC,OAAOC,GC+EIM,6MA1FbC,MAAQ,CACNC,UACAvB,MAAO,EACPC,SAAU,EACVF,OAAQ,0CACRN,WAAY,GACZK,YAAa,MAMfS,WAAa,SAAAC,GAEX,IAAMgB,EAAgBC,EAAKH,MAAMC,QAAQG,UAAU,SAAAC,GAAI,OAAIA,EAAKnB,KAAOA,IAGvE,GAAIiB,EAAKH,MAAMC,QAAQC,GAAeI,QAEpCH,EAAKI,SAAS,CACZpC,WAAY,eACZK,YAAa,4BACbC,OAAM,cAAA+B,OAAgBL,EAAKH,MAAMC,QAAQC,GAAef,KAAlD,wBACNc,QAASX,EAAQa,EAAKH,MAAMC,QAAQQ,IAAI,SAAAJ,GAAgC,OAAtBA,EAAKC,SAAU,EAAcD,KAC/E3B,MAAO,IAILyB,EAAKH,MAAMtB,MAAQyB,EAAKH,MAAMrB,UAChCwB,EAAKI,SAAS,CAAE5B,SAAUwB,EAAKH,MAAMtB,YAGpC,CAEH,IAAMgC,EAAYP,EAAKH,MAAMC,QAAQQ,IAAI,SAAAJ,GAIvC,OAHIA,EAAKnB,KAAOA,IACdmB,EAAKC,SAAU,GAEVD,IAITF,EAAKI,SAAS,CACZpC,WAAY,GACZK,YAAa,GACbC,OAAM,iBAAA+B,OAAmBL,EAAKH,MAAMC,QAAQC,GAAef,KAArD,KACNT,MAAOyB,EAAKH,MAAMtB,MAAQ,EAC1BuB,QAASX,EAAQoB,IAGf,WACyB,KAArBC,KAAKX,MAAMtB,OACbiC,KAAKJ,SAAS,CACZ5B,SAAUgC,KAAKX,MAAMtB,MACrBP,WAAY,eACZK,YAAa,4BACbC,OAAM,oDACNC,MAAO,EACPuB,QAASX,EAAQqB,KAAKX,MAAMC,QAAQQ,IAAI,SAAAJ,GAAgC,OAAtBA,EAAKC,SAAU,EAAcD,8FAUzFM,KAAKJ,SAAS,CAAEN,QAASX,EAAQqB,KAAKX,MAAMC,4CAOrC,IAAAW,EAAAD,KACP,OACE5C,EAAAC,EAAAC,cAACF,EAAAC,EAAM6C,SAAP,KACE9C,EAAAC,EAAAC,cAAC6C,EAAD,CAAQtC,YAAamC,KAAKX,MAAMxB,YAAaC,OAAQkC,KAAKX,MAAMvB,OAAQC,MAAOiC,KAAKX,MAAMtB,MAAOC,SAAUgC,KAAKX,MAAMrB,WACtHZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAC8C,EAAD,CAAOjC,MAAM,uBACbf,EAAAC,EAAAC,cAAC+C,EAAD,CAAe9C,UAAU,4BAA4BC,WAAYwC,KAAKX,MAAM7B,YACzEwC,KAAKX,MAAMC,QAAQQ,IAAI,SAAAJ,GAAI,OAAItC,EAAAC,EAAAC,cAACgD,EAAD,CAAUC,IAAKb,EAAKnB,GAAIA,GAAImB,EAAKnB,GAAID,WAAY2B,EAAK3B,WAAYI,MAAOgB,EAAKhB,oBAnFxG8B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f684a7a3.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction CardContainer(props) {\r\n\r\n  return (\r\n    <div className={props.classState}>\r\n      <div className=\"row d-flex justify-content-center\">\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardContainer\r\n","import React from 'react';\r\nimport \"./style.css\";\r\nfunction Navbar(props) {\r\n  return (\r\n    <div className=\"nav-bg py-2\">\r\n      <div className=\"container\">\r\n        <ul className=\"nav d-flex flex-sm-row flex-column justify-content-between\">\r\n          <li className=\"nav-item align-self-start\">\r\n            <a className=\"hvr-pokeball-grow\" href=\"/\"><img className=\"pokeball\" src=\"./images/pokeball.png\" /></a>\r\n\r\n          </li>\r\n          <li className=\"nav-item align-self-center\">\r\n            <h3><span className={\"status \" + props.statusState}>{props.status}</span></h3>\r\n\r\n          </li>\r\n          <li className=\"d-flex flex-sm-row align-self-end\">\r\n            <h5 className=\"scores nav-item\">Score: <span>{props.score}</span></h5>\r\n            <h5 className=\"scores nav-item ml-3\">Top Score: <span>{props.topscore}</span></h5>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport \"./style.css\"\r\n// Dumb Component\r\nfunction Title(props) {\r\n  return (\r\n    <div className=\"my-1\">\r\n      <h1 className=\"text-center\">\r\n      <img className=\"logo\" alt='Pokemon Logo' src='./images/pokemon-logo.svg' />\r\n      {' '}<span className=\"title\">{props.title}</span>\r\n       </h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// Dumb component only receives props\r\n// The Parent App Component passes a function to the Pokecard component so that Pokecard can update the App state.\r\nfunction PokeCard(props) {\r\n  return (\r\n    <div className=\"col-4 col-md-3\">\r\n      {/* when clicked, we update the state in App compoonet */}\r\n      <div className=\"card hvr-grow\" onClick={() => props.pickedCard(props.id)}>\r\n        <img\r\n          className=\"card-img\"\r\n          alt={props.name}\r\n          src={process.env.PUBLIC_URL + props.image}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokeCard;\r\n","//  the Fisher-Yates (aka Knuth) Shuffle\r\n// https://github.com/coolaj86/knuth-shuffle\r\nfunction shuffle(props) {\r\n    // reset shuffledArray array\r\n    // console.log(\"this.state.pokemon: \", props)\r\n    const shuffledArray = props;\r\n    // const numCards = 12;\r\n    // for (var i = 0; i < numCards; i++) {\r\n    //     shuffledArray.push(i);\r\n    // }\r\n    var randomIndex;\r\n    var tempIndex;\r\n    // go from 11-0; randomize current i; \r\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\r\n        randomIndex = Math.floor(Math.random() * (i + 1));\r\n        tempIndex = shuffledArray[i]; // copy current index to temp\r\n        shuffledArray[i] = shuffledArray[randomIndex]; // copy random index to current index i in array\r\n        shuffledArray[randomIndex] = tempIndex; // copy temp index to random index\r\n    }\r\n    // console.log(\"Shuffled Array: \", shuffledArray);\r\n    \r\n    return shuffledArray;\r\n}\r\n\r\nexport default shuffle;","import React, { Component } from 'react';\r\n// import './App.css';\r\nimport CardContainer from \"./components/CardContainer\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Title from \"./components/Title\";\r\nimport PokeCard from \"./components/PokeCard\";\r\nimport pokemon from './pokemon.json';\r\nimport shuffle from './components/shuffle';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    pokemon,\r\n    score: 0,\r\n    topscore: 0,\r\n    status: 'Try not to pick the same Pokemon twice!',\r\n    classState: \"\",\r\n    statusState: \"\"\r\n  }\r\n\r\n  // TODO method for shuffling cards\r\n\r\n  // method for changing card's 'picked' state to true if clicked\r\n  pickedCard = id => {\r\n    // find the index of the clicked pokemon based on the pokemon's ID using .findIndex()\r\n    const selectedIndex = this.state.pokemon.findIndex(item => item.id === id);\r\n\r\n    // check to see if clicked pokemon has been clicked before\r\n    if (this.state.pokemon[selectedIndex].clicked) {\r\n      // GAME OVER\r\n      this.setState({\r\n        classState: \"hvr-buzz-out\",\r\n        statusState: \"hvr-buzz-out text-warning\",\r\n        status: `You picked ${this.state.pokemon[selectedIndex].name} already! Try Again!`,\r\n        pokemon: shuffle(this.state.pokemon.map(item => { item.clicked = false; return item })),\r\n        score: 0\r\n      });\r\n\r\n      // reset pokemon list\r\n      if (this.state.score > this.state.topscore) {\r\n        this.setState({ topscore: this.state.score });\r\n      }\r\n    }\r\n    else {\r\n      // change state to true by updating pokemon list\r\n      const tempState = this.state.pokemon.map(item => {\r\n        if (item.id === id) {\r\n          item.clicked = true;\r\n        }\r\n        return item\r\n      })\r\n\r\n      // increment score by 1\r\n      this.setState({\r\n        classState: \"\",\r\n        statusState: \"\",\r\n        status: `I choose you, ${this.state.pokemon[selectedIndex].name}!`,\r\n        score: this.state.score + 1,\r\n        pokemon: shuffle(tempState)\r\n      }\r\n        // set a CALLBACK to see if score reaches 12\r\n        , function () {\r\n          if (this.state.score === 12) {\r\n            this.setState({\r\n              topscore: this.state.score,\r\n              classState: \"hvr-buzz-out\",\r\n              statusState: \"hvr-buzz-out text-success\",\r\n              status: `You Won! You got the max score! Let's Play Again!`,\r\n              score: 0,\r\n              pokemon: shuffle(this.state.pokemon.map(item => { item.clicked = false; return item }))\r\n            });\r\n          }\r\n\r\n        });\r\n    }\r\n    // if player gets the max 12, player wins round!\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ pokemon: shuffle(this.state.pokemon) });\r\n\r\n  }\r\n\r\n  // TODO reset picked to false, score to 0 then reload cards\r\n\r\n  // Pass a function to each card to update the Parent(App.js) state.\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar statusState={this.state.statusState} status={this.state.status} score={this.state.score} topscore={this.state.topscore} />\r\n        <div className=\"App container\">\r\n          <Title title=\"Clicky Memory Game\" />\r\n          <CardContainer className=\"d-flex align-items-center\" classState={this.state.classState}>\r\n            {this.state.pokemon.map(item => <PokeCard key={item.id} id={item.id} pickedCard={this.pickedCard} image={item.image} />)}\r\n          </CardContainer>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}